C51 COMPILER V9.60.0.0   HX710                                                             03/23/2022 11:03:06 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE HX710
OBJECT MODULE PLACED IN .\Objects\HX710.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source\HX710.c LARGE OPTIMIZE(0,SPEED) BROWSE INCDIR(.\Source;C:\Keil_v5
                    -\C51\INC) DEFINE(C51_COMPILER) DEBUG OBJECTEXTEND PRINT(.\Listings\HX710.lst) TABS(2) OBJECT(.\Objects\HX710.obj)

line level    source

   1          /**
   2           ******************************************************************************
   3           * @file    HX710.C
   4           * @author  Harshal
   5           * @version 01.00
   6           * @date    25-Aug-2021
   7           * @brief   System Initialization file for   module.
   8           *           + Initialization / configuration of all hardware modules is done
   9           *           in this file.
  10           ******************************************************************************
  11           * @attention
  12           * @{
  13           * <h2><center>&copy; Copyright 2017  </center></h2>
  14           *                      All rights reserved.
  15           * An unpublished work by  Limited . This material contains
  16           * CONFIDENTIAL INFORMATION that is the property of   Limited .
  17           * Any unauthorized use, duplication or disclosure is prohibited.
  18           * @}
  19           ******************************************************************************
  20           */
  21          
  22          /*
  23           *******************************************************************************
  24           *                               FILE HISTORY
  25           *******************************************************************************
  26           * Change    : 00
  27           * Author    : Harshal
  28           * Date      : 25-Aug-2021
  29           * Brief     : created file
  30           *
  31           *******************************************************************************
  32           */
  33          
  34          
  35          /*
  36           *******************************************************************************
  37           *                                INCLUDE FILES
  38           *******************************************************************************
  39           */
  40          
  41          #include"HX710.H"
  42          
  43          /*
  44           *******************************************************************************
  45           *                          PRIVATE MACROS & CONSTANTS
  46           *******************************************************************************
  47           */
  48          #define NO_OF_SAMP            (10U)          //20 OG VALUE
  49          
  50          #ifdef C51_COMPILER
  51          sbit ADDO = P1^6;
  52          sbit ADSK = P1^7;
  53          #endif
  54          /*
C51 COMPILER V9.60.0.0   HX710                                                             03/23/2022 11:03:06 PAGE 2   

  55           *******************************************************************************
  56           *                         PRIVATE VARIABLE DECLARATION
  57           *******************************************************************************
  58           */
  59          
  60          static load_cell_db_t load_cell_db;
  61          
  62          /*
  63           *******************************************************************************
  64           *                         PRIVATE FUNCTION DECLARATION
  65           *******************************************************************************
  66           */
  67          
  68          static uint32_t read(void);
  69          static float read_average(uint8_t times);
  70          
  71          /**
  72           *******************************************************************************
  73           * @fn void LoadCellDbInit(void)
  74           *******************************************************************************
  75           * @brief    void LoadCellDbInit(void)
  76           * @param     None
  77           * @retval    None
  78           ********************************************************************************
  79           */
  80          
  81          void LoadCellDbInit(void)
  82          {
  83   1        Initial_IAP();
  84   1      
  85   1        IAP_Read(CAL_VALUE_ADDR , (uint8_t *)(&load_cell_db.cal_value) , MEM_DATA_SIZE);
  86   1      
  87   1        if(DEFAULT_MEM_SIGN != load_cell_db.mem_sign )
  88   1        {
  89   2          load_cell_db.mem_sign = DEFAULT_MEM_SIGN;
  90   2          load_cell_db.cal_value = 1;
  91   2          load_cell_db.offset = 0;
  92   2      
  93   2          IAP_Program(CAL_VALUE_ADDR , (uint8_t *)(&load_cell_db.cal_value) , MEM_DATA_SIZE);
  94   2          IAP_Read(CAL_VALUE_ADDR , (uint8_t *)(&load_cell_db.cal_value) , MEM_DATA_SIZE);
  95   2        }
  96   1      
  97   1      }//End of LoadCellDbInit
  98          
  99          
 100          /**
 101           *******************************************************************************
 102           * @fn  load_cell_db_t *GetLoadCellDb(void)
 103           *******************************************************************************
 104           * @brief     load_cell_db_t *GetLoadCellDb(void)
 105           * @param     None
 106           * @retval    None
 107           ********************************************************************************
 108           */
 109          
 110          load_cell_db_t *GetLoadCellDb(void)
 111          {
 112   1        return(&load_cell_db);
 113   1      }//End of GetLoadCellDb
 114          
 115          
 116          /**
C51 COMPILER V9.60.0.0   HX710                                                             03/23/2022 11:03:06 PAGE 3   

 117           ******************************************************************************
 118           * @fn float read()
 119           ******************************************************************************
 120           * @brief float read()
 121           * @note   None
 122           * @param  None
 123           * @retval None
 124           ******************************************************************************
 125           */
 126          void LoadCellPrcs(void)
 127          {
 128   1      
 129   1        uint32_t sum = 0;
 130   1        uint8_t ctr = 0;
 131   1        static uint32_t load_cell_timer = 0;
 132   1        int32_t temp_raw_val = 0;
 133   1      
 134   1        if(TRUE == SysTick_IsTimeOutOccurred(&load_cell_timer, 5))
 135   1        {
 136   2          for (ctr =0; ctr < NO_OF_SAMP; ctr++)
 137   2          {
 138   3            sum += read();
 139   3          }
 140   2          load_cell_db.raw_value = sum / NO_OF_SAMP;
 141   2          
 142   2          temp_raw_val = load_cell_db.raw_value;
 143   2          temp_raw_val -=  load_cell_db.offset;
 144   2          load_cell_db.real_value = temp_raw_val/load_cell_db.cal_value;
 145   2        }
 146   1      
 147   1      }//End of LoadCellPrcs
 148          
 149          #ifdef C51_COMPILER
 150          /**
 151           ******************************************************************************
 152           * @fn float read()
 153           ******************************************************************************
 154           * @brief float read()
 155           * @note   None
 156           * @param  None
 157           * @retval None
 158           ******************************************************************************
 159           */
 160          uint32_t read(void)
 161          {
 162   1        uint32_t Count;
 163   1        uint8_t i;
 164   1      
 165   1        ADDO=1;
 166   1        ADSK=0;
 167   1        Count=0;
 168   1        while(ADDO);
 169   1      
 170   1        for (i=0;i<24;i++)
 171   1        {
 172   2          ADSK=1;
 173   2          Count=Count<<1;
 174   2          ADSK=0;
 175   2          if(ADDO)
 176   2            Count++;
 177   2        }
 178   1        ADSK=1;
C51 COMPILER V9.60.0.0   HX710                                                             03/23/2022 11:03:06 PAGE 4   

 179   1        Count=Count^0x800000;
 180   1        ADSK=0;
 181   1      
 182   1        return(Count);
 183   1      }// End of read
 184          #else
              /**
               ******************************************************************************
               * @fn float read()
               ******************************************************************************
               * @brief float read()
               * @note   None
               * @param  None
               * @retval None
               ******************************************************************************
               */
              uint32_t read(void)
              {
                uint32_t Count;
                uint8_t i;
              
                //ADDO=1;
                P1 &= ~(1<<7);
                Count=0;
                while((P1 & (1 << 6)) == (1 << 6));
              
                for (i=0;i<24;i++)
                {
                  P1 |= (1<<7);
                  Count=Count<<1;
                  P1 &= ~(1<<7);
                  if((P1 & (1 << 6)) == (1 << 6))
                    Count++;
                }
                P1 |= (1<<7);
                Count=Count^0x800000;
              
                P1 &= ~(1<<7);
              
              
                return(Count);
              }// End of read
              #endif
 222          
 223          /**
 224           ******************************************************************************
 225           * @fn float read_average(uint8_t times)
 226           ******************************************************************************
 227           * @brief
 228           * @note   None
 229           * @param  None
 230           * @retval None
 231           ******************************************************************************
 232           */
 233          
 234          float read_average(uint8_t times)
 235          {
 236   1        float sum = 0;
 237   1        uint8_t i, j;
 238   1        for (i = 0; i < times; i++)
 239   1        {
 240   2          sum += read();
C51 COMPILER V9.60.0.0   HX710                                                             03/23/2022 11:03:06 PAGE 5   

 241   2          for(j =0; j< 100; j++)
 242   2          {}
 243   2        }
 244   1        return sum / times;
 245   1      }// End of read_average
 246          
 247          
 248          /**
 249           ******************************************************************************
 250           * @fn void LoadCellTare (uint8_t times)
 251           ******************************************************************************
 252           * @brief
 253           * @note   None
 254           * @param  None
 255           * @retval None
 256           ******************************************************************************
 257           */
 258          
 259          void LoadCellTare (uint8_t times)
 260          {
 261   1        load_cell_db.offset = read_average(times);
 262   1        IAP_Program(OFFSET_ADDR , (uint8_t *)(&load_cell_db.offset) , 4);
 263   1      }//End of LoadCellTare
 264          
 265          /*-------------------------------END OF FILE----------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    779    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     46    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
