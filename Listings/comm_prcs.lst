C51 COMPILER V9.60.0.0   COMM_PRCS                                                         03/23/2022 11:03:06 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE COMM_PRCS
OBJECT MODULE PLACED IN .\Objects\comm_prcs.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source\comm_prcs.c LARGE OPTIMIZE(0,SPEED) BROWSE INCDIR(.\Source;C:\Kei
                    -l_v5\C51\INC) DEFINE(C51_COMPILER) DEBUG OBJECTEXTEND PRINT(.\Listings\comm_prcs.lst) TABS(2) OBJECT(.\Objects\comm_prcs
                    -.obj)

line level    source

   1          /**
   2           ******************************************************************************
   3           * @file    comm_prcs.c
   4           * @author  Harshal
   5           * @version 01.00
   6           * @date    25-Aug-2021
   7           * @brief   System Initialization file for   module.
   8           *           + Initialization / configuration of all hardware modules is done
   9           *           in this file.
  10           ******************************************************************************
  11           * @attention
  12           * @{
  13           * <h2><center>&copy; Copyright 2017  </center></h2>
  14           *                      All rights reserved.
  15           * An unpublished work by  Limited . This material contains
  16           * CONFIDENTIAL INFORMATION that is the property of   Limited .
  17           * Any unauthorized use, duplication or disclosure is prohibited.
  18           * @}
  19           ******************************************************************************
  20           */
  21          
  22          /*
  23           *******************************************************************************
  24           *                               FILE HISTORY
  25           *******************************************************************************
  26           * Change    : 00
  27           * Author    : Harshal
  28           * Date      : 25-Aug-2021
  29           * Brief     : created file
  30           *
  31           *******************************************************************************
  32           */
  33          
  34          
  35          /*
  36           *******************************************************************************
  37           *                                INCLUDE FILES
  38           *******************************************************************************
  39           */
  40          
  41          #include "comm_prcs.h"
  42          
  43          
  44          /*
  45           *******************************************************************************
  46           *                          PRIVATE MACROS & CONSTANTS
  47           *******************************************************************************
  48           */
  49          
  50          typedef struct 
  51          {
  52            uint8_t buffer[16];
  53            uint8_t *buffer_ptr;
C51 COMPILER V9.60.0.0   COMM_PRCS                                                         03/23/2022 11:03:06 PAGE 2   

  54            uint8_t ctr;
  55          }buff_rx_t;
  56          
  57          //typedef struct i2c_rx_t
  58          //{
  59          //  uint8_t buffer[16];
  60          //  uint8_t *buffer_ptr;
  61          //  uint8_t ctr;
  62          //};
  63          
  64          //typedef enum confMenuStates
  65          //{
  66          //  CONF_MENU_COMMAND = 1,
  67          //  TARE_ZERO_COMMAND,
  68          //  EXIT_CONF_MENU_COMMAND,
  69          //  CALIBRATION_COMMAND
  70          //};
  71          
  72          /*
  73           *******************************************************************************
  74           *                         PRIVATE VARIABLE DECLARATION
  75           *******************************************************************************
  76           */
  77          
  78          static buff_rx_t uart_rx_db;
  79          static buff_rx_t i2c_rx_db;
  80          
  81          /*
  82           *******************************************************************************
  83           *                         PRIVATE FUNCTION DECLARATION
  84           *******************************************************************************
  85           */
  86          
  87          static void ClearUartRecvBuff(void);
  88          static void ClearI2cRecvBuff(void);
  89          //static bool_t read_calibration_data (void);
  90          
  91          
  92          /**
  93           ******************************************************************************
  94           * @fn void CommPrcs (void)
  95           ******************************************************************************
  96           * @brief  void CommPrcs (void)
  97           * @note   None
  98           * @param  None
  99           * @retval None
 100           ******************************************************************************
 101           */
 102          void Comm_Init(void)
 103          {
 104   1        Initial_UART0();
 105   1        ClearUartRecvBuff();
 106   1      
 107   1      }//End of Comm_Init
 108          
 109          /**
 110           ******************************************************************************
 111           * @fn void CommPrcs (void)
 112           ******************************************************************************
 113           * @brief  void CommPrcs (void)
 114           * @note   None
 115           * @param  None
C51 COMPILER V9.60.0.0   COMM_PRCS                                                         03/23/2022 11:03:06 PAGE 3   

 116           * @retval None
 117           ******************************************************************************
 118           */
 119          void CommPrcs (void)
 120          {
 121   1        typedef enum
 122   1        {
 123   1          COMM_SEND_DATA_ST,
 124   1          READ_CALIBRATION_SCALE
 125   1        }comm_prcs_state_t;
 126   1      
 127   1        static comm_prcs_state_t comm_prcs_state = COMM_SEND_DATA_ST;
 128   1        load_cell_db_t *load_cell_db_ptr = GetLoadCellDb();
 129   1      //  uint8_t *temp_ptr = (uint8_t *)(&load_cell_db_ptr->cal_value);
 130   1        float32_t temp_cal_value = 0.0;
 131   1        uint8_t *temp_ptr = (uint8_t *)(&temp_cal_value);   
 132   1        static uint32_t led_toggle_timer = 0;
 133   1      
 134   1        switch(comm_prcs_state)
 135   1        {
 136   2        case COMM_SEND_DATA_ST:
 137   2        if(TRUE == SysTick_IsTimeOutOccurred(&led_toggle_timer, 5))
 138   2        {
 139   3          SFRPI=1;                                  
 140   3          P6 ^= 2;                                    //This is to set pin 6.1 toggle
 141   3          SFRPI=0;
 142   3        }
 143   2      
 144   2          if ( 'R' == uart_rx_db.buffer[0])
 145   2          {
 146   3            UART0_Transmit((uint8_t*)&uart_rx_db.buffer[0] , 1);
 147   3            UART0_Transmit((uint8_t*)&load_cell_db_ptr->raw_value , 8);
 148   3            ClearUartRecvBuff();
 149   3          }
 150   2          else if(uart_rx_db.buffer[0] == 'T')
 151   2          {
 152   3            LoadCellTare(10);
 153   3            ClearUartRecvBuff();
 154   3          }
 155   2          else if(uart_rx_db.buffer[0] == 'C')
 156   2          {
 157   3            comm_prcs_state = READ_CALIBRATION_SCALE;
 158   3          }
 159   2          else if ( 'X' == uart_rx_db.buffer[0])
 160   2          {
 161   3            
 162   3            UART0_Transmit((uint8_t*)&uart_rx_db.buffer[0] , 1);
 163   3            UART0_Transmit((uint8_t*)&load_cell_db_ptr->cal_value , 8);
 164   3            ClearUartRecvBuff();
 165   3          }
 166   2          break;
 167   2      
 168   2        case READ_CALIBRATION_SCALE:
 169   2          if(uart_rx_db.ctr >= 5)
 170   2          {
 171   3            *temp_ptr++ = uart_rx_db.buffer[1];
 172   3            *temp_ptr++ = uart_rx_db.buffer[2];
 173   3            *temp_ptr++ = uart_rx_db.buffer[3];
 174   3            *temp_ptr++ = uart_rx_db.buffer[4];
 175   3            
 176   3             load_cell_db_ptr->cal_value = (load_cell_db_ptr->raw_value  - load_cell_db_ptr->offset)/temp_cal_value
             -; 
C51 COMPILER V9.60.0.0   COMM_PRCS                                                         03/23/2022 11:03:06 PAGE 4   

 177   3      
 178   3            ClearUartRecvBuff();
 179   3            IAP_Program(CAL_VALUE_ADDR , (uint8_t *)(&load_cell_db_ptr->cal_value) , 4);
 180   3            comm_prcs_state = COMM_SEND_DATA_ST;
 181   3          }
 182   2          break;
 183   2        }
 184   1      }//End of CommPrcs
 185          
 186          
 187          
 188          
 189          /**
 190           ******************************************************************************
 191           * @fn void I2cCommPrcs (void)
 192           ******************************************************************************
 193           * @brief  void I2cCommPrcs (void)
 194           * @note   None
 195           * @param  None
 196           * @retval None
 197           ******************************************************************************
 198           */
 199          void I2cCommPrcs (void)
 200          {
 201   1        typedef enum
 202   1        {
 203   1          COMM_SEND_DATA_ST,
 204   1          READ_CALIBRATION_SCALE
 205   1        }comm_prcs_state_t;
 206   1      
 207   1        static comm_prcs_state_t I2c_comm_prcs_state = COMM_SEND_DATA_ST;
 208   1        load_cell_db_t *load_cell_db_ptr = GetLoadCellDb();
 209   1      //  uint8_t *temp_ptr = (uint8_t *)(&load_cell_db_ptr->cal_value);
 210   1        uint8_t *temp_ptr2 = (uint8_t *)(&load_cell_db_ptr->raw_value);
 211   1        uint8_t temp_data[9] = {0};
 212   1        static uint8_t cal_data_wait = 0;
 213   1        
 214   1        float32_t temp_cal_value = 0.0;
 215   1        uint8_t *temp_ptr = (uint8_t *)(&temp_cal_value); 
 216   1      
 217   1        switch(I2c_comm_prcs_state)
 218   1        {
 219   2        case COMM_SEND_DATA_ST:
 220   2      
 221   2          if (i2c_rx_db.buffer[0] == 'R')
 222   2          {
 223   3            temp_data[0] = i2c_rx_db.buffer[0];
 224   3            temp_data[1] = *temp_ptr2++;
 225   3            temp_data[2] = *temp_ptr2++;
 226   3            temp_data[3] = *temp_ptr2++;
 227   3            temp_data[4] = *temp_ptr2++;
 228   3            temp_data[5] = *temp_ptr2++;
 229   3            temp_data[6] = *temp_ptr2++;
 230   3            temp_data[7] = *temp_ptr2++;
 231   3            temp_data[8] = *temp_ptr2;
 232   3            
 233   3      //      ClearI2cRecvBuff();
 234   3            
 235   3            I2cFillBuffer(temp_data);
 236   3          }
 237   2          else if(i2c_rx_db.buffer[0] == 'T')
 238   2          {
C51 COMPILER V9.60.0.0   COMM_PRCS                                                         03/23/2022 11:03:06 PAGE 5   

 239   3            LoadCellTare(10);              //10 OG VALUE
 240   3      //      ClearI2cRecvBuff();
 241   3          }
 242   2          else if(i2c_rx_db.buffer[0] == 'C')
 243   2          {
 244   3            cal_data_wait++;
 245   3            if(i2c_rx_db.ctr > 8 )
 246   3            {
 247   4              I2c_comm_prcs_state = READ_CALIBRATION_SCALE;
 248   4              cal_data_wait = 0;
 249   4            }
 250   3            if(cal_data_wait > 20)
 251   3            {
 252   4              ClearI2cRecvBuff();
 253   4              cal_data_wait = 0;
 254   4            }
 255   3          }
 256   2          else if (i2c_rx_db.buffer[0] == 'X')
 257   2          {
 258   3            temp_data[0] = i2c_rx_db.buffer[0];
 259   3            temp_data[1] = *temp_ptr++;
 260   3            temp_data[2] = *temp_ptr++;
 261   3            temp_data[3] = *temp_ptr++;
 262   3            temp_data[4] = *temp_ptr++;
 263   3            temp_data[5] = *temp_ptr++;
 264   3            temp_data[6] = *temp_ptr++;
 265   3            temp_data[7] = *temp_ptr++;
 266   3            temp_data[8] = *temp_ptr;
 267   3            
 268   3      //      ClearI2cRecvBuff();
 269   3            
 270   3            I2cFillBuffer(temp_data);
 271   3          }
 272   2          
 273   2          if(i2c_rx_db.buffer[0] != 'C')
 274   2          {
 275   3            ClearI2cRecvBuff();
 276   3          }
 277   2          break;
 278   2      
 279   2        case READ_CALIBRATION_SCALE:
 280   2          if(i2c_rx_db.ctr >= 5)
 281   2          {     
 282   3            *temp_ptr++ = i2c_rx_db.buffer[1];
 283   3            *temp_ptr++ = i2c_rx_db.buffer[2];
 284   3            *temp_ptr++ = i2c_rx_db.buffer[3];
 285   3            *temp_ptr++ = i2c_rx_db.buffer[4];
 286   3            
 287   3             load_cell_db_ptr->cal_value = (load_cell_db_ptr->raw_value  - load_cell_db_ptr->offset)/temp_cal_value
             -; 
 288   3      
 289   3      
 290   3            ClearI2cRecvBuff();
 291   3            IAP_Program(CAL_VALUE_ADDR , (uint8_t *)(&load_cell_db_ptr->cal_value) , 4);
 292   3            I2c_comm_prcs_state = COMM_SEND_DATA_ST;
 293   3          }
 294   2          break;
 295   2        }
 296   1      }//End of I2cCommPrcs
 297          
 298          
 299          /**
C51 COMPILER V9.60.0.0   COMM_PRCS                                                         03/23/2022 11:03:06 PAGE 6   

 300           ******************************************************************************
 301           * @fn void UartRxPrcs (uint8_t rx_data)
 302           ******************************************************************************
 303           * @brief  void UartRxPrcs (uint8_t rx_data)
 304           * @note   None
 305           * @param  None
 306           * @retval None
 307           ******************************************************************************
 308           */
 309          void UartRxPrcs (uint8_t rx_data)
 310          {
 311   1        if(uart_rx_db.ctr < 16)
 312   1        {
 313   2          *uart_rx_db.buffer_ptr++ = rx_data;
 314   2          uart_rx_db.ctr++;
 315   2        }
 316   1        else
 317   1        {
 318   2          uart_rx_db.buffer_ptr = uart_rx_db.buffer;
 319   2          uart_rx_db.ctr = 0;
 320   2        }
 321   1      }// End of UartRxPrcs
 322          
 323          
 324          /**
 325           ******************************************************************************
 326           * @fn void ClearUartRecvBuff(void)
 327           ******************************************************************************
 328           * @brief
 329           * @note   None
 330           * @param  None
 331           * @retval None
 332           ******************************************************************************
 333           */
 334          void ClearUartRecvBuff(void)
 335          {
 336   1        (void)memset(uart_rx_db.buffer , 0 , 16);
 337   1        uart_rx_db.buffer_ptr = uart_rx_db.buffer;
 338   1        uart_rx_db.ctr = 0;
 339   1      }// End of ClearUartRecvBuff
 340          
 341          
 342          /**
 343           ******************************************************************************
 344           * @fn void I2cRxPrcs (uint8_t rx_data)
 345           ******************************************************************************
 346           * @brief  void I2cRxPrcs (uint8_t rx_data)
 347           * @note   None
 348           * @param  None
 349           * @retval None
 350           ******************************************************************************
 351           */
 352          void I2cRxPrcs (uint8_t rx_data)
 353          {
 354   1        if(i2c_rx_db.ctr < 16)
 355   1        {
 356   2          *i2c_rx_db.buffer_ptr++ = rx_data;
 357   2          i2c_rx_db.ctr++;
 358   2        }
 359   1        else
 360   1        {
 361   2          i2c_rx_db.buffer_ptr = i2c_rx_db.buffer;
C51 COMPILER V9.60.0.0   COMM_PRCS                                                         03/23/2022 11:03:06 PAGE 7   

 362   2          i2c_rx_db.ctr = 0;
 363   2        }
 364   1      }// End of I2cRxPrcs
 365          
 366          /**
 367           ******************************************************************************
 368           * @fn void ClearI2cRecvBuff(void)
 369           ******************************************************************************
 370           * @brief
 371           * @note   None
 372           * @param  None
 373           * @retval None
 374           ******************************************************************************
 375           */
 376          void ClearI2cRecvBuff(void)
 377          {
 378   1        (void)memset(i2c_rx_db.buffer , 0 , 16);
 379   1        i2c_rx_db.buffer_ptr = i2c_rx_db.buffer;
 380   1        i2c_rx_db.ctr = 0;
 381   1      }// End of ClearI2cRecvBuff
 382          
 383          
 384          
 385          /**
 386           ******************************************************************************
 387           * @fn void Delay (void)
 388           ******************************************************************************
 389           * @brief
 390           * @note   None
 391           * @param  None
 392           * @retval None
 393           ******************************************************************************
 394           */
 395          void Delay (void)
 396          {
 397   1        int i, j;
 398   1      
 399   1        for(i=0; i<1000; i++)
 400   1        {
 401   2          for(j=0; j<100; j++)
 402   2          {
 403   3          }
 404   2        }
 405   1      }//End of Delay
 406          
 407          /*-------------------------------END OF FILE----------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1761    ----
   CONSTANT SIZE    =      9    ----
   XDATA SIZE       =     85    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
